#!/run/current-system/sw/bin/zsh -ie

cecho "G" "updating channels"
nix-channel --update
sudo nix-channel --update

nixos-rebuild dry-build
if [ $? -ne 0 ]; then 
    exit 1;
fi

if [ $(hostname) = jupiter ]; then
    cecho "G" "Backup boot"
    sudo mount /dev/disk/by-uuid/9959-75AB /media/boot_backup
    sudo cp -r /boot/ /media/boot_backup
    sudo umount /media/boot_backup
fi

cecho "G" "Commiting nixos configuration"
zsh -c "                                                                                                                \
    cp /etc/nixos/configuration.nix $HOME/projects/nixos/configuration.$(hostname).nix;                                 \
    cp /etc/nixos/hardware-configuration.nix $HOME/projects/nixos/hardware-configuration.$(hostname).nix;               \
    cp $HOME/.config/nixpkgs/config.nix $HOME/projects/nixos/config.$(hostname).nix;                                    \
    cd $HOME;                                                                                                           \
    $DOTFILES_GIT git -c core.excludesfile=~/.gitignore-dotfiles add $HOME/projects/nixos/configuration.$(hostname).nix $HOME/projects/nixos/hardware-configuration.$(hostname).nix $HOME/projects/nixos/config.$(hostname).nix;    \
    $DOTFILES_GIT git -c core.excludesfile=~/.gitignore-dotfiles commit -m 'Update nixos config of $(hostname)';        \
    exit 0;
"

# if [ -d "$HOME/projects/nixpkgs" ]; then
#     cecho "G" "updating package rescources"
#     zsh -c "cd ~/projects/nixpkgs && git checkout master && git fetch upstream && git merge upstream/master && exit 0"
#      # (
#      #     cd ~/projects/nixpkgs
#      #     git checkout master
#      #     git fetch upstream
#      #     git merge upstream/master
#      #     exit 0
#      # )
# fi

# System related
cecho "G" "upgrading installed system packages"
sudo nixos-rebuild switch

# Colorschemes
if [ -d "$HOME/local/intellij-colors-solarized" ]; then
    cd "$HOME/local/intellij-colors-solarized"
    git pull
    # cp "$HOME/local/intellij-colors-solarized"
    cd -
fi

if [ -d "$HOME/local/sabuni" ]; then
    cd "$HOME/local/sabuni"
    git pull
    # cp "$HOME/local/sabuni"
    cd -
fi

if [ -d "$HOME/local/termite-colors-solarized" ]; then
    cd "$HOME/local/termite-colors-solarized"
    git pull
    # cp "$HOME/local/termite-colors-solarized"
    cd -
fi

# Local packages
LOC_INSTALLED=(${(f)"$(nix-env -q)"})
cecho "G" "Updating installed packages";
nix-env --upgrade '*'

typeset -A pkg_nixpkgs_prio
pkg_nixpkgs_prio[test-packages]=3
typeset -A pkg_unstable_prio
pkg_unstable_prio[common-packages]=4
pkg_unstable_prio[laptop-packages]=7
pkg_unstable_prio[dev-packages]=8
pkg_unstable_prio[highres-packages]=9
pkg_unstable_prio[ssd-packages]=10
pkg_unstable_prio[gaming-packages]=11
pkg_unstable_prio[mining-packages]=12

for loc_pkg in "${LOC_INSTALLED[@]}"
do
    if test "${pkg_unstable_prio[${loc_pkg}]+isset}"; then
        cecho "G" "upgrading ${loc_pkg} with prio ${pkg_unstable_prio[${loc_pkg}]} on channel <nixos-unstable>"
        nix-env --set-flag priority "${pkg_unstable_prio[${loc_pkg}]}" "${loc_pkg}"
        nix-env -iA "${loc_pkg}" -f "<nixos-unstable>"
        nix-env --set-flag priority "${pkg_unstable_prio[${loc_pkg}]}" "${loc_pkg}"
    elif test "${pkg_nixpkgs_prio[${loc_pkg}]+isset}"; then
        cecho "G" "upgrading ${loc_pkg} with prio ${pkg_nixpkgs_prio[${loc_pkg}]} on channel <nixpkgs>"
        nix-env --set-flag priority "${pkg_nixpkgs_prio[${loc_pkg}]}" "${loc_pkg}"
        nix-env -iA "${loc_pkg}" -f "<nixpkgs>"
        nix-env --set-flag priority "${pkg_nixpkgs_prio[${loc_pkg}]}" "${loc_pkg}"
    else
        nix-env -u "${loc_pkg}"
    fi
done


# Cleanup and optimize
cecho "G" "optimize nix-store"
nix-store --optimize

cecho "G" "cleanup nix garbage"
nix-collect-garbage --delete-older-than 90d

# Plugin manager and programs
cecho "G" "updating zgen plugins..."
zgen update

cecho "G" "updating vim plugins..."
vim +PlugUpgrade +PlugInstall +PlugUpdate +PlugClean! +qall

# cecho "G" "updating global npm packages"
# npm -g update

# cecho "G" "updating git repos"
# mr update

# Filesystem related
cecho "G" "updating mlocate database..."
sudo updatedb
sudo mandb

# sudo btrfs filesystem defragment /
sync

exit 0
