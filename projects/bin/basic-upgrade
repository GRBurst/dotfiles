#!/run/current-system/sw/bin/zsh -ie

if [ $(hostname) = jupiter ]; then
    cecho "G" "Backup boot"
    sudo mount /dev/disk/by-uuid/9959-75AB /media/boot_backup
    sudo cp -r /boot/ /media/boot_backup
    sudo umount /media/boot_backup
fi

cecho "G" "Commiting nixos configuration"
zsh -c "                                                                                                                \
    cp /etc/nixos/configuration.nix $HOME/projects/nixos/configuration.$(hostname).nix;                                 \
    cp /etc/nixos/hardware-configuration.nix $HOME/projects/nixos/hardware-configuration.$(hostname).nix;               \
    cp $HOME/.config/nixpkgs/config.nix $HOME/projects/nixos/config.$(hostname).nix;                                    \
    cd $HOME;                                                                                                           \
    $DOTFILES_GIT git -c core.excludesfile=~/.gitignore-dotfiles add $HOME/projects/nixos/configuration.$(hostname).nix $HOME/projects/nixos/hardware-configuration.$(hostname).nix $HOME/projects/nixos/config.$(hostname).nix;    \
    $DOTFILES_GIT git -c core.excludesfile=~/.gitignore-dotfiles commit -m 'Update nixos config of $(hostname)';        \
    exit 0;
"

if [ -d "$HOME/projects/nixpkgs" ]; then
    cecho "G" "updating package rescources"
    zsh -c "cd ~/projects/nixpkgs && git checkout master && git fetch upstream && git merge upstream/master && exit 0"
     # (
     #     cd ~/projects/nixpkgs
     #     git checkout master
     #     git fetch upstream
     #     git merge upstream/master
     #     exit 0
     # )
fi

cecho "G" "updating channels"
nix-channel --update
sudo nix-channel --update

# System related
cecho "G" "upgrading installed packages"
sudo nixos-rebuild switch
nix-env -u '*'

# Local packages
LOC_INSTALLED=$(echo $(nix-env -q))

if echo "$LOC_INSTALLED" | grep -q common-packages; then
    cecho "G" "upgrading common packages"
    nix-env -iA common-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q dev-packages; then
    cecho "G" "upgrading dev packages"
    nix-env -iA dev-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q scala-packages; then
    cecho "G" "upgrading scala packages"
    nix-env -iA scala-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q ssd-packages; then
    cecho "G" "upgrading ssd packages"
    nix-env -iA ssd-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q laptop-packages; then
    cecho "G" "upgrading laptop packages"
    nix-env -iA laptop-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q highres-packages; then
    cecho "G" "upgrading highres packages"
    nix-env -iA highres-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q lowres-packages; then
    cecho "G" "upgrading lowres packages"
    nix-env -iA lowres-packages -f '<nixpkgs>'
fi

if echo "$LOC_INSTALLED" | grep -q test-packages; then
    cecho "G" "upgrading test packages"
    nix-env -iA test-packages -f '<nixpkgs>'
fi

# Cleanup and optimize
cecho "G" "optimize nix-store"
nix-store --optimize

cecho "G" "cleanup nix garbage"
nix-collect-garbage --delete-older-than 30d

# Plugin manager and programs
cecho "G" "updating zgen plugins..."
zgen update

cecho "G" "updating vim plugins..."
vim +PlugUpgrade +PlugInstall +PlugUpdate +PlugClean! +qall

# cecho "G" "updating global npm packages"
# npm -g update

# cecho "G" "updating git repos"
# mr update

# Filesystem related
cecho "G" "updating mlocate database..."
sudo updatedb
sudo mandb

# sudo btrfs filesystem defragment /
sync

exit 0
