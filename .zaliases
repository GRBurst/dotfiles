OS="$(uname 2> /dev/null)"
IS_LINUX=false
IS_MAC=false
if [ "$OS" == "Linux" ]; then
    IS_LINUX=true
else if [ "$OS" == "Darwin" ]
    IS_MAC=true
fi

# Git
alias g="git"
alias grsc='git rebase -i $(git-select-commit)^'
alias g-add-label='gh pr edit --add-label $(gh label list --limit 100 --json name -q ".[].name" | fzf)'

# DOTFILES_HIVEMIND_TIG="TIGRC_USER=$HOME/.config/tig/config-dotfiles-hivemind $"
# alias tigh=
# alias tig="if grep -i $(pwd) 'hivemind'; then tigh else tig fi"
alias grep="tee >(echo 'using rg (rigrep) instead' >&2) | rg"
alias cat="tee >(echo 'using bat instead' >&2) | bat"
alias traceroute="tee >(echo 'you might use mtr instead' >&2) | traceroute"
alias du="tee >(echo 'using dust (du-dust) instead' >&2) | dust"
alias sed="tee >(echo 'using sd instead' >&2) | sd"
alias diff="tee >(echo 'using difftastic instead' >&2) | difftastic"

# Dotfiles
alias d="$HOME/projects/bin/git-dotfiles"
alias dp="$DOTFILES_PRIVATE_GIT git -c core.excludesfile=~/.gitignore-dotfiles-private"
alias d="$HOME/projects/bin/git-dotfiles"
alias tigd="$HOME/projects/bin/tig-dotfiles"

# vim configs
alias vim="nvim"
alias vi3="vim ~/.config/i3/common/config"
alias vnpc="vim ~/.config/nixpkgs/config.nix"
alias vssh="vim ~/.ssh/config"
alias vza="vim ~/.zaliases"

# Dev
alias m='make'
alias mc='make clean'
alias cg="cargo"
alias scala='scala -Dscala.color -deprecation -unchecked -explaintypes -language:_'
alias amm='amm --no-remote-logging'
alias jsb='underscore print --color --outfmt json' # beautify json, package: npm -g install underscore-cli
alias nw='cd ~/projects/woost/wust2 && git pull && nix-shell --command "zsh"'
alias nl='cd ~/projects/woost/listo && git pull && nix-shell --command "zsh"'
alias nld='cd ~/projects/woost/listo && git pull && nix-shell --arg stable false --command "zsh"'
alias ws='cd ~/projects/woost/wust2 && ./start sbt'
alias rmt='cd-git-root; rm -r **/target **/.*/**/target'
alias rm='rm -I'

# cross-os rm -i
if [ "$IS_LINUX" = true ]; then
    alias rm='rm -I'
else
    alias rm='rm -i'
fi


# alias rwu='cd ~/projects/woost/wust2; ./start nsbt'
swu() {
    cd ~/projects/woost/wust2
    ./start "$@"
}
tagraw() {
    (
        cd-git-root
        ./scripts/increase-version-tag.sh "$@"
    )
}
release() {
    (
        cd-git-root
        ./scripts/release.sh "$@"
    )
}
alias tag="tagraw sign changelog"
alias tagh="tagraw sign changelog hotfix"

# Docker
alias dr="docker"
alias drc="docker container"
alias dri="docker image"
alias drv="docker volume"
alias drn="docker network"
alias drcl="docker container ls"
alias dril="docker image ls"
alias drvl="docker volume ls"
alias drnl="docker network ls"
alias drcr="docker container rm"
alias drvr="docker volume rm"
alias drir="docker image rm"
alias drnr="docker network rm"
alias drstop="docker stop"
alias drstart="docker start"
alias drps="docker ps --format 'table {{ .Names }}\t{{ .Status }}\t{{ .Ports }}\t{{ .Networks }}'"
alias drpsl="docker ps"
alias drl="docker logs"
alias drst="docker status"
alias drex="docker exec -it"

dricl() { docker image rm -f $(docker images -q) }
drsa() { docker stop $(docker ps -a -q) }
drsh() { docker exec -it $1 sh }
drbash() { docker exec -it $1 bash }
drls() {
    echo "Containers"
    docker container ls
    echo -e "\nVolumes"
    docker volume ls
    echo -e "\nNetworks"
    docker network ls
    echo -e "\nImages"
    docker image ls
}
drclean1() {
    docker stop $(docker ps -a -f name="$1" -q )
    docker container rm -f $(docker ps -a -f name="$1" -q )
    docker network rm $(docker network ls -f name="$1" -q )
}
drclean1f() {
    docker stop $(docker ps -a -f name="$1" -q )
    docker container rm -f $(docker ps -a -f name="$1" -q )
    docker volume rm -f $(docker volume ls -f name="$1" -q )
    docker network rm $(docker network ls -f name="$1" -q )
}
drclean1ff() {
    docker stop $(docker ps -a -f name="$1" -q )
    docker container rm -f $(docker ps -a -f name="$1" -q )
    docker volume rm -f $(docker volume ls -f name="$1" -q )
    docker network rm $(docker network ls -f name="$1" -q )
    docker image rm -f $(docker images ls -f -q | grep -i "$1" )
}
drclean() {
    docker stop $(docker ps -a -q )
    docker container rm -f $(docker ps -a -q )
    docker network rm $(docker network ls -q )
}
drcleanf() {
    docker stop $(docker ps -a -q )
    docker container rm -f $(docker ps -a -q )
    docker network rm $(docker network ls -q )
    docker volume rm -f $(docker volume ls -q )
}
drcleanff() {
    docker stop $(docker ps -a -q )
    docker container rm -f $(docker ps -a -q )
    docker image rm -f $(docker images -q )
    docker network rm $(docker network ls -q )
    docker volume rm -f $(docker volume ls -q )
}
drclean?() {
    local numContainer="$(docker container ls -q | wc -l)"
    local numVolumes="$(docker volume ls -q | wc -l)"
    local numNetworks="$(docker network ls -q | wc -l)"
    if [[ "$numContainer" -eq 0 && "$numVolumes" -eq 0 && "$numNetworks" -eq 3 ]]; then
        echo "Docker clean"
    else
        echo "Docker unclean"
    fi
}

# cross-os file-listing

if [ "$IS_LINUX" = true ]; then
    if [ -n "${commands[grc]}" ]; then
        alias ls='grc ls --group-directories-first --color=always --escape --human-readable --classify'
    else
        alias ls='ls --group-directories-first --color=always --escape --human-readable --classify'
    fi
else
    # for Mac
    alias ls='ls -hFG'
fi

# VirtualBox
# VBoxManage list runningvms | grep -c 1 macOS
# sshfs macvm:/Users/$(id -un)/projects/listo ~/projects/woost/macvm-listo
alias macvm='VBoxManage startvm "macOS" --type headless'
alias macvmg='VBoxManage startvm "macOS"'
alias macvmd='VBoxManage startvm "macOS" --type headless; sleep 180; ssh macvm'
alias macvms='ssh macvm; sleep 180; echo "shutting down at $(date)" >> ~/poweroff.log; poweroff'
alias macvmds='VBoxManage startvm "macOS" --type headless; sleep 180; ssh macvm; sleep 180; echo "shutting down at $(date)" >> ~/poweroff.log; poweroff'

# Colors
alias ssh='TERM=xterm-256color ssh'
alias l='ls -l'
alias la='ls -lah'
alias lh='ls -hAl'
alias ll='ls -l'
alias lt='ls -lt'

# cd
alias cdd='cd ~/downloads'
alias cdp='cd ~/projects'
alias cd.='cd ~/projects/dotfiles'
alias cdt='cd-tmp'
alias cdff='/tmp/ffdownloads'
alias cdg='cd-git-root'
alias cdnpc='cd ~/.config/nixpkgs'
alias cdi3='cd ~/.config/i3'
alias pp='cd ~/projects/$(ls -t ~/projects | head -1)'
alias vm='vim $(git-select-dirty-files)'
alias vbu="vim ~/projects/bin/basic-upgrade"
p() { cd ~/projects/"$(ls -t ~/projects | fzf --query="$(echo $@ | tr ' ' '\ ' )")";}
cdl() { cd "$1"; ls; }

# file listing/interaction
alias dd='sudo dd status=progress bs=4M conv=fsync'
alias df='df -h'
alias cp='cp -i'
alias cpf='\cp -f'
alias mv='mv -i'
alias mp='mkdir -p'
alias mdcd='mkdir -cd'
alias md='mkdir $(date -I)'
alias mvi='interactive-mv'
alias mcp='noglob zmv -C -W'
alias mln='noglob zmv -L -W'
alias mmv='noglob zmv -W'
#o() { gio open $@ > /dev/null 2>&1; } # gio not availabe in nixos
# o() { xdg-open $@ > /dev/null 2>&1; }
o() { mimeo $@ > /dev/null 2>&1; }
serve() { miniserve -g -z -p 12345 $1 }
mmmv() {
    mmv -n $1 $2 | cut -f4 -d ' ' | xargs mkdir -p
    mmv "$1/*" "$2/*"
}

# VirtualBox
# VBoxManage list runningvms | grep -c 1 macOS
alias macvm='VBoxManage startvm "macOS" --type headless'
alias macvmg='VBoxManage startvm "macOS"'
alias macvmds='VBoxManage startvm "macOS" --type headless; sleep 300; ssh macvm'
alias macvms='ssh macvm; sleep 300; echo "shutting down at $(date)" >> ~/poweroff.log; poweroff'
alias macvmds='VBoxManage startvm "macOS" --type headless; sleep 300; ssh macvm; sleep 300; echo "shutting down at $(date)" >> ~/poweroff.log; poweroff'
if [ "$IS_MAC" = true ]; then
    alias munlock='security unlock-keychain /Users/$USER/Library/Keychains/login.keychain'
fi

# SSH
alias rcp="rsync --append-verify --archive --compress --human-readable --info=progress2 --partial --sparse"
alias ssh-tmate="ssh -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
alias ssf="ssh -J pluto fff"
alias ssp="ssh pluto"
alias ssm="ssh mac"

# Nix
ni() { nix-env -iA "$@" -f "<nixos-unstable>" }
alias nq='nix-env -q'
alias ns='nix develop --command "zsh"'
alias nsi='nix develop --impure --command "zsh"'
alias nsl='nix-shell --command "zsh"'
alias ne='nix-env -e'
alias nh='nix-hash --type sha256 --flat --base32'
alias nqp='nix-store --query --references $(nix-instantiate "<nixpkgs>" -A dev-packages)'


# File Tools
alias t="tree -C"
alias ta="tree -a"
alias f="find"
alias ff="find . -type f -iname "
alias fd="find . -type d -iname "
# alias fif="find-in-file"

# FZF
fif() {
    RG_PREFIX="rg --column --smart-case --no-heading --files-with-matches --hidden"
    fzf --bind "change:reload:$RG_PREFIX {q} || true" --ansi --disabled --preview 'rg --color=always --smart-case -C 5 {q} {+}' --preview-window wrap $@
}
fiv() {
    # RG_PREFIX="rg --column --smart-case --line-number --no-heading"
    RG_PREFIX="rg --column --smart-case --no-heading --files-with-matches --hidden"
    file="$(fzf --bind "change:reload:$RG_PREFIX {q} || true" --ansi --disabled --preview 'rg --color=always --smart-case -C 5 {q} {+}' --preview-window wrap $@)"
    vim "$file"
}
fivl() {
    local query file
    while true; do
        RG_PREFIX="rg --column --smart-case --no-heading --files-with-matches --hidden"
        fzf --bind "change:reload:$RG_PREFIX {q} || true" --ansi --disabled --preview 'rg --color=always --smart-case -C 5 {q} {+}' --preview-window wrap --print-query --print0 -q "$query" | read -r query file
        if [[ -z "$file" ]]; then
            break
        fi
        vim $file || break
        echo "query: $query"
        echo "file: $file"
    done
}
fakl() {
    local query file
    while true; do
        users=$(aws --profile ape-prod iam list-users | jq -r ".Users | .[].UserName")

        get_user() {
            aws --profile ape-prod iam list-access-keys --user-name $1
        }

        echo $users | fzf --bind "change:reload:(echo $users) || true" --ansi --disabled --preview (get_user {q}) --preview-window wrap 
        # --print-query --print0 -q "$query" | read -r query file
        # if [[ -z "$file" ]]; then
        #     break
        # fi
        # vim $file || break
        # echo "query: $query"
        # echo "file: $file"
    done
}

# FS
alias blk="lsblk -o NAME,SIZE,FSTYPE,LABEL,UUID,FSSIZE,FSAVAIL,FSUSE%,MOUNTPOINT,RO,RM"
alias lsblk="blk"
alias dsize="sudo du -hsx ./* | sort -rh | head -n 40"

# Reverse search links
rln() {
    # $1 file, $2 searchpath
    find -L ${2:-.} -samefile $1
}
# Raid
raid_health() {
    cat /proc/mdstat
    sudo mdadm -D /dev/md0
}

raid_check() {
    sudo bash -c 'echo 400000 >/proc/sys/dev/raid/speed_limit_min'
    sudo bash -c 'echo 400000 >/proc/sys/dev/raid/speed_limit_max'
    sudo bash -c 'echo check > /sys/block/md0/md/sync_action'
}

raid_watch() {
    watch -t 'cat /proc/mdstat'
}

# vim
alias se="sudoedit"
alias vimt='vim $(date +"%Y-%m-%d")'
v() {
    (
        cd-git-root > /dev/null
        file="$(fzf --query="$(echo $@ | tr ' ' '\ ' )")"
        [[ -n $file ]] && vim "$file"
    );
}
# v() { echo $@ | vim -c Rooter -c Files }
vb() { vim $(which $1); }
vr() { vim -c "History $*"; }
vt() { vim -c "Tags $*"; }

# alias vim="vim --servername vim-$$" # always start vim as server (for live colorscheme changing, working differently for neovim)
nvim_command() {
    # usage: nvim_command <socket> <command>
    # requires: https://github.com/jakm/msgpack-cli

    # https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md
    # msgpack-rpc is an array of [type, msgid, method, params]
    # encode and send it to nvims unix socket via netcat
    msgpack-cli encode <(echo "[0,0,\"vim_command\",[\"$2\"]]") | netcat -U $1
}

nvim_all_command() {
    # usage: nvim_all_command <command>
    for nvim in /tmp/nvim*/0; do
        nvim_command $nvim "$1"
    done
}

x() {
    (nohup $@ > /tmp/$1.log) &
}

xx() {
    $@ &
    disown
    exit
}

cgw() {
    cargo $1
    cargo watch $1
}

alias ssbt="cd-git-root; ./start sbt"
sbt() { (
    # TODO: search tree upwards for build.sbt
    if [ ! -f build.sbt ]; then
        cd-git-root
    fi
    env sbt $@
    )
}

# i3
alias i3-update-conf="'cat' $HOME/.config/i3/local/config* > $HOME/.config/i3/config; 'cat' $HOME/.config/i3/common/config >> $HOME/.config/i3/config; i3-msg reload;"


# Projects
sshkeygen() {
    ssh-keygen -t ed25519 -C "$(whoami)@$(hostname)->$1 on $(date -I)" -f "$HOME/.ssh/$(hostname)->$1"
}
sshkeygen_legacy() {
    ssh-keygen -t rsa -b 4096 -C "$(whoami)@$(hostname)->$1 on $(date -I)" -f "$HOME/.ssh/$(hostname)->$1_legacy"
}
mdot() {
    local n=$(basename "$1")
    dot -Tsvg $1 -o /tmp/$n.svg; atril -s /tmp/$n.svg
}
proj_ctags () {
    cd-git-root
    dir=$(realpath .)
    touch $dir/tags
    ctags --fields=+l --c-kinds=+p --c++-kinds=+p -f $dir/tags -R $dir
}

# General
bindmount() {
    sudo mkdir -p /media/{$2,$2-system} \
        && sudo mount /dev/$1 /media/$2-system \
        && sudo bindfs -u $(id -u) -g $(id -g) /media/$2-system /media/$2
}
bindumount() {
    sudo umount /media/$1 \
        && sudo umount /media/$1-system
}
alias ateamsmb="cd /tmp && smbclient //ateam/upload -U nobody -N -W FOO"
ateam-mount() {
    sudo mount -t cifs //ateam/ateam /media/ateam/ateam -o guest,uid=$(id -u),gid=$(id -g),ro
    sudo mount -t cifs //ateam/upload /media/ateam/upload -o guest,uid=$(id -u),gid=$(id -g),rw
}
ateam-umount() {
    sudo umount /media/ateam/upload
    sudo umount /media/ateam/ateam
}
tmpremount() {
    sudo mount -o remount,size="$1",noatime /tmp
}
nixos-details() {
    printf '- System: '
    nixos-version
    printf '- Nix version: '
    nix-env --version
    printf '- Nixpkgs version: '
    nix-instantiate --eval '<nixpkgs>' -A lib.nixpkgsVersion
    printf '- Sandboxing enabled: '
    grep build-use-sandbox /etc/nix/nix.conf | sed s/.*=//
}

sylvester-payments() {
local days=30
local entries=31
if [[ "$#" -eq 1 ]]; then
    entries=$((${1}+1))
fi
local result=$(ssh sylvester "dumpykota --data payments start=today-${days} end=now | sort -k 3 -t ',' | tail -n ${entries}")
echo ${result} | tail -n 1
echo ${result}
# for value in "${result[@]}"; do
#     printf "%-8s\n" "${value}"
# done | column
}

search_replace() {
    ag "$1" -l0 | xargs -0 sed -i "s/$1/$2/g"
}
search_replace_all() {
    ag -a --hidden "$1" -l0 | xargs -0 sed -i "s/$1/$2/g"
}

# Internet and Wlan
alias has_inet="ping -q -w 1 -c 1 1.1.1.1 > /dev/null && echo online || echo offline"
alias has_dns="dig +short @1.1.1.1 ccc.de | grep -q '.' && echo 'dns online' || echo 'dns offline'"
alias won='nmcli radio wifi on; wscan'
alias woff='nmcli radio wifi off'
alias wscan='nmcli dev wifi rescan > /dev/null 2>&1; true'
alias wlist='nmcli dev wifi list'
alias wcon='nmcli dev wifi connect'

alias nload='nload -u h'

gobile() {
    echo "stopping network-heavy services and starting mobile network"
    sudo systemctl stop ipfs > /dev/null 2>&1
    sudo systemctl stop syncthing > /dev/null 2>&1
    sudo systemctl stop nixos-upgrade.timer > /dev/null 2>&1
    sudo systemctl stop nixos-upgrade > /dev/null 2>&1
    # nmcli connection up "Mobil Hotspot (MD)"
    # sudo systemctl start ModemManager.service
}
alias hotspot='nmcli connection up "Mobil Hotspot (MD)"'

# services & daemons
alias tv="sudo systemctl start teamviewerd.service && teamviewer"

# monitor
alias rhdmi="xrandr --output eDP1 --primary --auto --output HDMI2 --right-of eDP1 --auto"
alias hdmi="xrandr --output eDP1 --off --output HDMI2 --auto"
alias edp="xrandr --output eDP1 --primary --auto --output HDMI2 --off"

# AWS
alias aws-s3-ls='aws s3 ls --recursive $(aws s3 ls | fzf | cut -d " " -f3)'
fassh() {
    local instance
    instance=$(aws ec2 describe-instances --filter Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[] | [ .InstanceId, (.Tags[] | select(.Key == "Name") | .Value) ] | @tsv' | fzf | cut -f1)
    if [ -n "$instance" ]; then
        ssh $instance
    fi
}
fawslogs () {
    local group
    group=$(awslogs groups | fzf)
    if [ -n "$group" ]
    then
        awslogs get --watch $group --no-group --no-stream
    fi
}
# vim: ft=sh
