# Git config for dotfiles
[apply]
    # do not produce whitespace conflicts
    ignoreWhitespace = change

[alias]
    # Most used
    a   = add
    A   = add -A
    cl  = clone
    st  = status
    h   = help

    clu = "!f() { git clone $1 && git remote add upstream $2 && git remote -v ; }; f"
    clus = "!f() { IN=(${1//// }); git clone git@github.com:GRBurst/${IN[1]} && cd ${IN[1]} && git remote add upstream git@github.com:$1 && git remote -v ; }; f"


    # Branch
    b   = branch
    br  = branch -r
    bd  = branch -d
    bD  = branch -D
    bdr = push origin --delete
    brename = branch -m

    # Checkout
    o  = checkout
    ob = checkout -b
    om = checkout origin/master
    ot = "!f() { local tmpCommit=${1:-master} && echo $tmpCommit && mkdir -p /tmp/wust && git --work-tree=/tmp/wust checkout $tmpCommit -- . ; }; f"

    # Fetch
    f   = fetch
    fu  = fetch upstream
    fumm = "!f() { local curBranch=$(git rev-parse --abbrev-ref HEAD) && git stash save && git fetch upstream && git checkout master && git merge upstream/master && git checkout $curBranch && git stash pop; }; f" # fetch upstream and merge master
    furb = "!f() { local curBranch=$(git rev-parse --abbrev-ref HEAD) && git stash save && git fetch upstream && git checkout master && git merge upstream/master && git checkout $curBranch && git stash pop && git rebase -i master; }; f" # fetch upstream, merge master, rebase branch
    fuub = "!f() { local curBranch=$(git rev-parse --abbrev-ref HEAD) && git fetch upstream && git merge upstream/$curBranch; }; f" # fetch upstream and merge

    # Commit
    c       = commit -S
    cm      = commit -S -m
    cam     = commit -S -a -m
    amend   = commit -S --amend
    ca      = commit -S --amend
    wip		= "!f() { git commit -S -a -m 'wip' && git push; }; f"

    # Move pointer
    prev    = reset --soft HEAD~1
    next    = reset --soft HEAD@{1}
    unstage = reset HEAD

    # Log and diffs
    ref     = reflog
    lg      = fry one-line-log-colors
    lgg		= log --graph --pretty=format:'%Cred%h %C(reset)%C(dim)%ad%Creset %s%C(yellow)%d%C(reset) %C(blue)<%an> %Cgreen(%cr)%Creset' --abbrev-commit --date=short
    d       = diff
    dr		= "!f() { local curBranch=$(git rev-parse --abbrev-ref HEAD) && git diff origin/$curBranch $curBranch; }; f" # Compare current branch with remote branch
    df      = fry word-based-diff
    dfs     = fry word-based-diff --staged
    diff    = diff --irreversible-delete --find-copies  --find-copies-harder --ignore-space-at-eol --ignore-space-change --ignore-all-space
    diffs   = diff --irreversible-delete --find-copies  --find-copies-harder --ignore-space-at-eol --ignore-space-change --ignore-all-space --staged
    dpf     = diff HEAD^ --name-only
    ds		= show
    dt		= difftool
    dtd		= difftool -d

    # Push and pull
    p   = push
    pf  = push --force-with-lease
    po  = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\"" # push current branch to origin
    up  = pull
    pl  = pull
    prm = pull --rebase origin master

    # Cleanup
    prune   = fetch --prune # remove old branches
    dbr     = "!f() { git branch -D $1; git push origin :$1;}; f" # delete local and remote branch
    dtag    = "!f() { git tag -d $1; git push origin :$1;}; f" # delete local and remote tag

    # Stash
    s	= stash
    sl  = stash list
    ss  = stash save
    sd  = stash drop
    ssu = stash save --include-untracked
    ssp	= stash --patch
    sp  = stash pop
    sa	= stash apply
    sw	= stash show -p

    # Rebase
    r   = rebase
    ra  = rebase --abort
    rs  = rebase --skip
    rc  = rebase --continue
    ri  = rebase -i
    rim  = rebase -i master
    rbm  = rebase master
    #git rebase --onto [newParent] [oldParent] [branchToMove]
    #ro => rebase this branch from parent $1 onto parent $2
    ro = "!f() { git rebase --onto $1 $2 \"$(git rev-parse --abbrev-ref HEAD)\" ;}; f"
    #rom => rebase this branch from parent $1 onto master
    rom = "!f() { git rebase --onto master $1 \"$(git rev-parse --abbrev-ref HEAD)\" ;}; f"
    rum = rebase upstream/master

    # Tags
    tdl = "tag -d"
    td  = "!f() { git tag -d $1; git push origin :$1;}; f" # delete local and remote tag
    tm  = "tag -s -m"
    t   = "tag -s"

    # Merge
    m   = merge
    ma  = merge --abort
    ms  = merge --skip
    mc  = merge --continue
    mum = merge upstream/master

    # Cherry-pick
    cp  = cherry-pick
    cpa = cherry-pick --abort
    cps = cherry-pick --skip
    cpc = cherry-pick --continue

[branch]
    autosetuprebase = always

; [difftool "kdiff3"]
;     path = /home/jelias/.nix-profile/bin/kdiff3
;     trustExitCode = false

; [difftool]
;     prompt = false

; [diff]
;     tool = kdiff3

[mergetool "kdiff3"]
    path = /home/jelias/.nix-profile/bin/kdiff3
    trustExitCode = false

[mergetool]
    keepBackup = false

[merge]
    tool = kdiff3

[color]
    branch  = auto
    diff    = auto
    status  = auto

[color "branch"]
    current = yellow bold
    local   = green bold
    remote  = cyan bold

[color "diff"]
    meta        = yellow bold
    frag        = magenta bold
    old         = red bold
    new         = green bold
    whitespace  = red reverse

[color "status"]
    added       = green bold
    changed     = yellow bold
    untracked   = blue bold

[commit]
    verbose = true
	gpgsign = true

[core]
    pager   = less
    editor = nvim

[credential]
    helper = cache

[diff]
    algorithm       = histogram
    indentHeuristic = true
    wordRege        =[A-Z][a-z]*|[a-z]+|[^[:space:]] # see camel case as separate words

[fetch]
    prune   = true

[merge]
    ff              = only
    conflictstyle   = diff3

[user]
    email   = GRBurst@protonmail.com
    name    = GRBurst
	signingkey = 797F623868CD00C2

[pull]
    ff      = only
    rebase  = true

[push]
    default     = simple
    followTags  = true

[rebase]
    autoStash   = true
    autoSquash  = true

[status]
    showUntrackedFiles  = all

